# Create a ConfigMap to store MongoDB environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: Mongodb-Config  # Capitalized folder name
data:
  MONGO_INITDB_ROOT_USERNAME: root
  MONGO_INITDB_ROOT_PASSWORD: example

# Create PersistentVolumeClaims for MongoDB data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: Contact-Mongo-PVC  # Capitalized folder name
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: Buy-Mongo-PVC  # Capitalized folder name
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

# Create Deployments for MongoDB containers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: Contact-Mongo-Deployment  # Capitalized folder name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contact-mongo
  template:
    metadata:
      labels:
        app: contact-mongo
    spec:
      containers:
      - name: contact-mongo
        image: mongo:latest
        envFrom:
          - configMapRef:
              name: Mongodb-Config  # Capitalized folder name
        volumeMounts:
          - name: mongo-data
            mountPath: /data/db
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: Contact-Mongo-PVC  # Capitalized folder name

apiVersion: apps/v1
kind: Deployment
metadata:
  name: Buy-Mongo-Deployment  # Capitalized folder name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: buy-mongo
  template:
    metadata:
      labels:
        app: buy-mongo
    spec:
      containers:
      - name: buy-mongo
        image: mongo:latest
        envFrom:
          - configMapRef:
              name: Mongodb-Config  # Capitalized folder name
        volumeMounts:
          - name: mongo-data
            mountPath: /data/db
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: Buy-Mongo-PVC  # Capitalized folder name

# Create Services for MongoDB containers
apiVersion: v1
kind: Service
metadata:
  name: Contact-Mongo-Service  # Capitalized folder name
spec:
  selector:
    app: contact-mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

apiVersion: v1
kind: Service
metadata:
  name: Buy-Mongo-Service  # Capitalized folder name
spec:
  selector:
    app: buy-mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

# Create Deployments and Services for your backend and frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: Frontend-Deployment  # Capitalized folder name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: d20frontend:1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 80

apiVersion: v1
kind: Service
metadata:
  name: Frontend-Service  # Capitalized folder name
spec:
  selector:
    app: frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80

apiVersion: apps/v1
kind: Deployment
metadata:
  name: Backend-Deployment  # Capitalized folder name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: d20backend:1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000

apiVersion: v1
kind: Service
metadata:
  name: Backend-Service  # Capitalized folder name
spec:
  selector:
    app: backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
